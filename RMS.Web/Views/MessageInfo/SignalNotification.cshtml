@using RMS.Utility
@using RMS.Web.Extensions
@model RMS.Web.Models.ViewModel.MessageInfoViewModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="row">
    <div class="panel panel-info">
        <div class="panel-heading">
            <h5>Message Information</h5>
        </div>
        <div class="body">
            <div class="row">
                
                <div class="col-md-12">
                    @using (Html.BeginForm("SearchByKeyNot", "MessageInfo", FormMethod.Get, new { @class = "submit-allow ignore-validation" }))
                    {
                        <div>
                           
                            <div class="pull-left">
                                @Html.TextBoxFor(x => x.SearchKey, new { @class = "textBoxsize form-control", tabindex = 1, autofocus = "autofocus", placeholder = "Serach Value" })
                            </div>
                            <div class="pull-left">
                                &nbsp; &nbsp; @Html.SearchButton()&nbsp;
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    @{
        var grid = new WebGrid(canPage: true, rowsPerPage: AppConfig.PageSize, canSort: true, ajaxUpdateContainerId: "grid");
        grid.Bind(Model.MessageInfosV, rowCount: Model.MessageInfosV.Count, autoSortAndPage: true);
        grid.Pager(WebGridPagerModes.All);
        @grid.GetHtml(htmlAttributes: new { messageInfoIdentity = "grid" },
                tableStyle: "webgrid-table webgrid",
                headerStyle: "webgrid-header",
                footerStyle: "webgrid-footer",
                alternatingRowStyle: "webgrid-alternating-row",
                selectedRowStyle: "webgrid-selected-row",
                rowStyle: "webgrid-row-style",
                firstText: "First",
                lastText: "Last",
                nextText: "Next",
                mode: WebGridPagerModes.All,
                previousText: "Previous",
                columns: grid.Columns(
                                         grid.Column("MessageInfoIdentity", header: "Serial No"),
                grid.Column("MsgFromName", header: "Send Ship"),
                grid.Column("MsgToName", header: "Recieved Ship"),
                grid.Column("MessageId", header: "Signal DTG"),
                grid.Column("MsgCC", header: "Message CC"),
                grid.Column("Remark", header: "Reference"),
                grid.Column("MsgTypeName", header: "Message Type"),
                grid.Column("MessageDate", header: "Message Date", format: item => (item.MessageDate == null) ? "" : item.MessageDate.ToString("dd MMMM yyyy")),
                grid.Column("Message", header: "Message")
                                                        ));
    }
</div>

