@using RMS.Utility
@using RMS.Web.Extensions
@model RMS.Web.Models.ViewModel.MessageInfoViewModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="row">
    <div class="panel panel-info">
        <div class="panel-heading">
            <h5>Message Information</h5>
        </div>
        <div class="body">
            <table>
                <tr>
                    <td>@Html.ActionLink("Add New", "Edit", "MessageInfo", new { @class = "btn btn-primary" })</td>
                    <td>
                        @using (Html.BeginForm("SearchByKey", "MessageInfo", FormMethod.Get, new { @class = "submit-allow ignore-validation" }))
                        {

                            <table>
                                <tr>
                                    <td>
                                        @Html.Label("Search Key")
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(x => x.SearchKey, new { @class = "textBoxsize form-control", tabindex = 1, autofocus = "autofocus", placeholder = "Serach Value" })
                                    </td>
                                    <td>
                                        @Html.SearchButton()
                                    </td>
                                </tr>
                            </table>
                        }
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>
<div>
    <div class="pull-left">
        <div class="btn-group ">
            <button type="button" class="btn btn-primary">Export To</button>
            <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown"><span class="caret"></span></button>
            <ul class="dropdown-menu">
                <li>@Html.ActionLink("Excel", "ExportTo", new { ReportType = "Excel", searchKey = Model.SearchKey })</li>
                <li>@Html.ActionLink("PDF", "ExportTo", new { ReportType = "PDF", searchKey = Model.SearchKey })</li>
                <li>@Html.ActionLink("Word", "ExportTo", new { ReportType = "Word", searchKey = Model.SearchKey })</li>
            </ul>
        </div>
    </div>
</div>
<div class="row">
    @{
        var grid = new WebGrid(canPage: true, rowsPerPage: AppConfig.PageSize, canSort: true, ajaxUpdateContainerId: "grid");
        grid.Bind(Model.MessageInfos, rowCount: Model.MessageInfos.Count, autoSortAndPage: true);
        grid.Pager(WebGridPagerModes.All);
        @grid.GetHtml(htmlAttributes: new { messageInfoIdentity = "grid" },
                tableStyle: "webgrid-table webgrid",
                headerStyle: "webgrid-header",
                footerStyle: "webgrid-footer",
                alternatingRowStyle: "webgrid-alternating-row",
                selectedRowStyle: "webgrid-selected-row",
                rowStyle: "webgrid-row-style",
                firstText: "First",
                lastText: "Last",
                nextText: "Next",
                mode: WebGridPagerModes.All,
                previousText: "Previous",
                columns: grid.Columns(
                                         grid.Column("MessageInfoIdentity", header: "Serial No"),
                        grid.Column("MessageId", header: "Message ID"),
                        grid.Column("ShipInfo.ShipName", header: "Message From"),
                        grid.Column("ShipInfo1.ShipName", header: "Message To"),
                        grid.Column("MessageDate", header: "Message Date", format: item => (item.MessageDate == null) ? "" : item.MessageDate.ToString("dd MMMM yyyy")),
                        grid.Column("Subject", header: "Subject"),
                        grid.Column("Message", header: "Message"),
                        @*grid.Column(format: @<img src="@Url.Content(item.ImageUrl)" alt="@item.ImageUrl" height="30" width="30" />   , header: "Photo"),*@
                        grid.Column("Download", format: @<text> @Html.ActionLink("Download", "Download", "MessageInfo", new { id = item.messageInfoIdentity }, null)</text>),
                        grid.Column("Edit", format: @<text> @Html.ActionLink("Edit", "Edit", "MessageInfo", new { id = item.messageInfoIdentity }, null)</text>),
                                                grid.Column("Delete", format: @<text> @Html.ActionLink("Delete", "Delete", "MessageInfo", new { id = item.messageInfoIdentity }, null)</text>)
                                                        ));
    }
</div>

