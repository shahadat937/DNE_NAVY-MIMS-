@using DocumentFormat.OpenXml.Office.CustomUI
@using RMS.Utility
@using RMS.Web.Extensions
@model RMS.Web.Models.ViewModel.ShipInfoViewModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="row">
    <div class="panel panel-info">
        <div class="panel-heading">
            <h5>Refit / Docking Interval and Duration Information</h5>
        </div>
        <div class="body">
            <table>
                <tr>
                    <td>@Html.ActionLink("Add New", "EditRefitDocking", "ShipInfo", new { @class = "btn btn-primary" })</td>
                    <td>
                        @using (Html.BeginForm("SearchRefitAndDocking", "ShipInfo", FormMethod.Get, new { @class = "submit-allow ignore-validation" }))
                        {

                            <table>
                                <tr>
                                    <td>
                                        @Html.Label("Search Key")
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(x => x.SearchKey, new { @class = "textBoxsize form-control", tabindex = 1, autofocus = "autofocus", placeholder = "Serach Value" })
                                    </td>
                                    <td>
                                        @Html.SearchButton()
                                    </td>
                                </tr>
                            </table>
                        }
                    </td>
                </tr>
            </table>

        </div>
    </div>
</div>



<div class="row">
    <div class="">
        <div class="btn-group ">
            <button type="button" class="btn btn-primary">Export Report</button>
            <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown"><span class="caret"></span></button>
            <ul class="dropdown-menu">
                <li>@Html.ActionLink("Excel", "ExportTo", new { ReportType = "Excel", searchKey = Model.SearchKey, id = "RefitDockingDuration" })</li>
                <li>@Html.ActionLink("PDF", "ExportTo", new { ReportType = "PDF", searchKey = Model.SearchKey, id = "RefitDockingDuration" })</li>
                <li>@Html.ActionLink("Word", "ExportTo", new { ReportType = "Word", searchKey = Model.SearchKey, id = "RefitDockingDuration" })</li>
            </ul>
        </div>
    </div>
</div>
<div class="row">
    @{
        var grid = new WebGrid(canPage: true, rowsPerPage: AppConfig.PageSize, canSort: true, ajaxUpdateContainerId: "grid");
        grid.Bind(Model.ShipInfoes, rowCount: Model.ShipInfoes.Count, autoSortAndPage: true);
        grid.Pager(WebGridPagerModes.All);
        @grid.GetHtml(htmlAttributes: new { shipInfoIdentity = "grid" },
                tableStyle: "webgrid-table webgrid",
                headerStyle: "webgrid-header",
                footerStyle: "webgrid-footer",
                alternatingRowStyle: "webgrid-alternating-row",
                selectedRowStyle: "webgrid-selected-row",
                rowStyle: "webgrid-row-style",
                firstText: "First",
                lastText: "Last",
                nextText: "Next",
                mode: WebGridPagerModes.All,
                previousText: "Previous",
                columns: grid.Columns(
                                grid.Column("ShipInfoIdentity", header: "Serial No"),
                                grid.Column("ShipName", header: "Ship Name"),
                                grid.Column("ShipId", header: "CALL SIGN"),
                                grid.Column("SQD", header: "SQD"),
                                grid.Column("RefitInterval", header: "Refit Interval"),
                                grid.Column("RefitIntervalType", header: "Refit Interval Type"),
                                grid.Column("RefitDuration", header: "Refit Duration"),
                                grid.Column("RefitDurationType", header: "Refit Duration Type"),
                                grid.Column("DockingDuration", header: "Docking Duration"),
                                grid.Column("DockingDurationType", header: "Docking Duration Type"),
                                grid.Column("LastRefitDate", "Last Refit Date", format: item => ((item.LastRefitDate == null) ? "" : item.LastRefitDate.ToString("dd MMM yyyy"))),
                                grid.Column("LastDockingDate", header: "Last Docking Date", format: item => ((item.LastRefitDate == null) ? "" : item.LastRefitDate.ToString("dd MMM yyyy"))),
                                grid.Column("NextRefitDate", header: "Next Refit Date", format: item => ((item.NextRefitDate == null) ? "" : item.NextRefitDate.ToString("dd MMM yyyy"))),
                                grid.Column("NextDockingDate", header: "Next Docking Date", format: item => ((item.NextDockingDate == null) ? "" : item.NextDockingDate.ToString("dd MMM yyyy"))),
                                grid.Column("Remarks", header: "Remarks"),
                                grid.Column(header: "Edit", format: @<text>@Html.ActionLink("Edit", "EditRefitDocking", "ShipInfo", new { id = item.ShipInfoIdentity }, null)</text>, canSort: false)

                                                                                      ));
    }

</div>



