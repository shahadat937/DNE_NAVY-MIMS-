//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RMS.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using RMS.Model;

    public partial class RM_AGBEntities : DbContext
    {
        public RM_AGBEntities()
            : base("name=RM_AGBEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccountInformation> AccountInformations { get; set; }
        public virtual DbSet<BooksAndBr> BooksAndBrs { get; set; }
        public virtual DbSet<DailyTransaction> DailyTransactions { get; set; }
        public virtual DbSet<DamageMachineriesInfo> DamageMachineriesInfoes { get; set; }
        public virtual DbSet<DeckInfo> DeckInfoes { get; set; }
        public virtual DbSet<DefectMachinary> DefectMachinaries { get; set; }
        public virtual DbSet<Documentation> Documentations { get; set; }
        public virtual DbSet<EventLog> EventLogs { get; set; }
        public virtual DbSet<FortNightly> FortNightlies { get; set; }
        public virtual DbSet<FortnightlyDetail> FortnightlyDetails { get; set; }
        public virtual DbSet<FortnightlyInfo> FortnightlyInfoes { get; set; }
        public virtual DbSet<FuelConsumption> FuelConsumptions { get; set; }
        public virtual DbSet<LubOilConsumption> LubOilConsumptions { get; set; }
        public virtual DbSet<MachinaryRunningHour> MachinaryRunningHours { get; set; }
        public virtual DbSet<MachineryRunningInfo> MachineryRunningInfoes { get; set; }
        public virtual DbSet<MajorDemandOrProcure> MajorDemandOrProcures { get; set; }
        public virtual DbSet<OilRate> OilRates { get; set; }
        public virtual DbSet<POLExpenseInfo> POLExpenseInfoes { get; set; }
        public virtual DbSet<ProcurementSchedule> ProcurementSchedules { get; set; }
        public virtual DbSet<QuaterlyMainEnginesGeneratorsRunningHour> QuaterlyMainEnginesGeneratorsRunningHours { get; set; }
        public virtual DbSet<RefitDockingDefectList> RefitDockingDefectLists { get; set; }
        public virtual DbSet<RefitDockingSchedule> RefitDockingSchedules { get; set; }
        public virtual DbSet<Reporting> Reportings { get; set; }
        public virtual DbSet<ReturnReportNo> ReturnReportNoes { get; set; }
        public virtual DbSet<ReturnReportYear> ReturnReportYears { get; set; }
        public virtual DbSet<RunningHourInfo> RunningHourInfoes { get; set; }
        public virtual DbSet<ShipAndDocking> ShipAndDockings { get; set; }
        public virtual DbSet<ShipDetail> ShipDetails { get; set; }
        public virtual DbSet<ShipInactive> ShipInactives { get; set; }
        public virtual DbSet<ShipInactiveOrg> ShipInactiveOrgs { get; set; }
        public virtual DbSet<ShipInfo> ShipInfoes { get; set; }
        public virtual DbSet<ShipMovement> ShipMovements { get; set; }
        public virtual DbSet<ShipPower> ShipPowers { get; set; }
        public virtual DbSet<ShipRepairInfo> ShipRepairInfoes { get; set; }
        public virtual DbSet<ShipSpeedTrial> ShipSpeedTrials { get; set; }
        public virtual DbSet<TrainingInfo> TrainingInfoes { get; set; }
        public virtual DbSet<ZoneInfo> ZoneInfoes { get; set; }
        public virtual DbSet<UpdateOPlState> UpdateOPlStates { get; set; }
        public virtual DbSet<vwShipBranchInfo> vwShipBranchInfoes { get; set; }
        public virtual DbSet<BankInfo> BankInfoes { get; set; }
        public virtual DbSet<vwPontoon> vwPontoons { get; set; }
        public virtual DbSet<vwShipBankInfo> vwShipBankInfoes { get; set; }
        public virtual DbSet<ApprovedRefitDockingSchedule> ApprovedRefitDockingSchedules { get; set; }
        public virtual DbSet<ShipInactiveDescription> ShipInactiveDescriptions { get; set; }
        public virtual DbSet<ProcurementByDNE> ProcurementByDNEs { get; set; }
        public virtual DbSet<MEInfo> MEInfoes { get; set; }
        public virtual DbSet<UserBankInfo> UserBankInfoes { get; set; }
        public virtual DbSet<AsAndAsInfo> AsAndAsInfoes { get; set; }
        public virtual DbSet<vwRefitDokingNotification> vwRefitDokingNotifications { get; set; }
        public virtual DbSet<QuaterlyReturn> QuaterlyReturns { get; set; }
        public virtual DbSet<QuaterlyReturnEngineerOfficerRemark> QuaterlyReturnEngineerOfficerRemarks { get; set; }
        public virtual DbSet<YearlyReturnDetail> YearlyReturnDetails { get; set; }
        public virtual DbSet<UserLogInfo> UserLogInfoes { get; set; }
        public virtual DbSet<ICE> ICE { get; set; }
        public virtual DbSet<vwNotification> vwNotifications { get; set; }
        public virtual DbSet<MonthlyReturn> MonthlyReturns { get; set; }
        public virtual DbSet<CommonCode> CommonCodes { get; set; }
        public virtual DbSet<ControlShipInfo> ControlShipInfoes { get; set; }
        public virtual DbSet<YearlyReturn> YearlyReturns { get; set; }
        public virtual DbSet<MachineryInfo> MachineryInfoes { get; set; }
        public virtual DbSet<UserURLRight> UserURLRights { get; set; }
        public virtual DbSet<RoleUserURLRightMapping> RoleUserURLRightMappings { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<BranchInfo> BranchInfoes { get; set; }
        public virtual DbSet<UserProfile> UserProfiles { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<MessageInfo> MessageInfoes { get; set; }
        public virtual DbSet<RefitDockingReportExcell> RefitDockingReportExcells { get; set; }
    
        [DbFunction("RM_AGBEntities", "MachinaryEquipmentInformation")]
        public virtual IQueryable<MachinaryEquipmentInformation_Result> MachinaryEquipmentInformation(string shipId)
        {
            var shipIdParameter = shipId != null ?
                new ObjectParameter("ShipId", shipId) :
                new ObjectParameter("ShipId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<MachinaryEquipmentInformation_Result>("[RM_AGBEntities].[MachinaryEquipmentInformation](@ShipId)", shipIdParameter);
        }
    
        [DbFunction("RM_AGBEntities", "FuelConsumptions1")]
        public virtual IQueryable<FuelConsumptions1_Result> FuelConsumptions1(string shipId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var shipIdParameter = shipId != null ?
                new ObjectParameter("ShipId", shipId) :
                new ObjectParameter("ShipId", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FuelConsumptions1_Result>("[RM_AGBEntities].[FuelConsumptions1](@ShipId, @DateFrom, @DateTo)", shipIdParameter, dateFromParameter, dateToParameter);
        }
    
        [DbFunction("RM_AGBEntities", "MachinaryEquipmentInformationTest")]
        public virtual IQueryable<MachinaryEquipmentInformation_Result> MachinaryEquipmentInformationTest(string shipId)
        {
            var shipIdParameter = shipId != null ?
                new ObjectParameter("ShipId", shipId) :
                new ObjectParameter("ShipId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<MachinaryEquipmentInformation_Result>("[RM_AGBEntities].[MachinaryEquipmentInformationTest](@ShipId)", shipIdParameter);
        }
    
        [DbFunction("RM_AGBEntities", "NewMachinaryEquipmentInformation")]
        public virtual IQueryable<NewMachinaryEquipmentInformation_Result> NewMachinaryEquipmentInformation(string shipId)
        {
            var shipIdParameter = shipId != null ?
                new ObjectParameter("ShipId", shipId) :
                new ObjectParameter("ShipId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<NewMachinaryEquipmentInformation_Result>("[RM_AGBEntities].[NewMachinaryEquipmentInformation](@ShipId)", shipIdParameter);
        }
    
        [DbFunction("RM_AGBEntities", "NewMachinaryEquipmentInformationN")]
        public virtual IQueryable<NewMachinaryEquipmentInformationN_Result> NewMachinaryEquipmentInformationN(string shipId)
        {
            var shipIdParameter = shipId != null ?
                new ObjectParameter("ShipId", shipId) :
                new ObjectParameter("ShipId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<NewMachinaryEquipmentInformationN_Result>("[RM_AGBEntities].[NewMachinaryEquipmentInformationN](@ShipId)", shipIdParameter);
        }
    }
}
